package controller;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;
import model.Appointment;
import model.Case;
import model.Deadline;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;

public class EditCaseDetailsController {
	private DatabaseConnection database = new DatabaseConnection();
	private Connection connection;
	private Statement statement;
	private ResultSet resultSet;
	@FXML
	private TextField caseTitleField;
	@FXML
	private TableView clientTable;
	@FXML
	private TableColumn clientNameColumn;
	@FXML
	private TableColumn clientPhoneColumn;
	@FXML
	private TableColumn clientEmailColumn;
	@FXML
	private TableView deadlineTable;
	@FXML
	private TableColumn deadlineTitleColumn;
	@FXML
	private TableColumn deadlineDateColumn;
	@FXML
	private TableView appointmentTable;
	@FXML
	private TableColumn appointmentTitleColumn;
	@FXML
	private TableColumn appointmentLocationColumn;
	@FXML
	private TableColumn appointmentDateColumn;
	private Case c;
	private Stage dialogStage;

	private ObservableList<Deadline> deadlines = FXCollections.observableArrayList();
	private ObservableList<Appointment> appointments = FXCollections.observableArrayList();

	public void setDialogStage(Stage dialogStage){
		this.dialogStage = dialogStage;
	}

	// Event Listener on Button.onAction
	@FXML
	public void addDeadline(ActionEvent event) {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/AddDeadlineDialog.fxml"));
		try {
			Parent root = (Parent) loader.load();
			Stage dialogStage = new Stage();
			Scene scene = new Scene(root);
			dialogStage.setScene(scene);
			dialogStage.setTitle("Add Deadline");
			dialogStage.initModality(Modality.WINDOW_MODAL);

			AddDeadlineDialogController controller = loader.getController();
			controller.setCase(c);
			controller.setDialogStage(dialogStage);

			dialogStage.showAndWait();
			refreshLists();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Event Listener on Button.onAction
	@FXML
	public void deleteDeadline(ActionEvent event) {
		// TODO Autogenerated
		System.out.println("DELETED");
	}
	// Event Listener on Button.onAction
	@FXML
	public void editDeadline(ActionEvent event) {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/EditDeadlineDialogue.fxml"));
		try {
			Parent root = (Parent) loader.load();
			Stage dialogStage = new Stage();
			Scene scene = new Scene(root);
			dialogStage.setScene(scene);
			dialogStage.setTitle("Edit Deadline");
			dialogStage.initModality(Modality.WINDOW_MODAL);

			EditDeadlineDialogueController controller = loader.getController();
			controller.setDialogStage(dialogStage);

			dialogStage.showAndWait();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Event Listener on Button.onAction
	@FXML
	public void editAppointment(ActionEvent event) {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/EditAppointmentDialogue.fxml"));
		try {
			Parent root = (Parent) loader.load();
			Stage dialogStage = new Stage();
			Scene scene = new Scene(root);
			dialogStage.setScene(scene);
			dialogStage.setTitle("Edit Appointment");
			dialogStage.initModality(Modality.WINDOW_MODAL);

			EditAppointmentDialogueController controller = loader.getController();
			controller.setDialogStage(dialogStage);

			dialogStage.showAndWait();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Event Listener on Button.onAction
	@FXML
	public void addAppointment(ActionEvent event) {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/AddAppointmentDialog.fxml"));
		try {
			Parent root = (Parent) loader.load();
			Stage dialogStage = new Stage();
			Scene scene = new Scene(root);
			dialogStage.setScene(scene);
			dialogStage.setTitle("Add Appointment");
			dialogStage.initModality(Modality.WINDOW_MODAL);

			AddAppointmentDialogController controller = loader.getController();
			controller.setCase(c);
			controller.setDialogStage(dialogStage);

			dialogStage.showAndWait();
			refreshLists();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	// Event Listener on Button.onAction
	@FXML
	public void deleteAppointment(ActionEvent event) {
		// TODO Autogenerated
		System.out.println("DELETED");
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleSubmit(ActionEvent event) {
		//TODO implement
		dialogStage.close();
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleClose(ActionEvent event) {
		dialogStage.close();
	}

	public void setCase(Case c){
		this.c = c;
	}

	private ObservableList<Deadline> getDataFromADeadlineAndAddToObservableList(String query){
		ObservableList<Deadline> deadlineData = FXCollections.observableArrayList();
		try {
			connection = database.getConnection();
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);//"SELECT * FROM deadline;"
			System.out.println(query);
			ResultSetMetaData rsmd = resultSet.getMetaData();
			System.out.println(resultSet);
			int columnsNumber = rsmd.getColumnCount();
			while(resultSet.next()){
				for (int i = 1; i <= columnsNumber; i++) {
					if (i > 1) System.out.print(",  ");
					String columnValue = resultSet.getString(i);
					System.out.print(columnValue + " " + rsmd.getColumnName(i));
				}
				System.out.println();
				int deadline_id = resultSet.getInt(1);
				String deadline_title = resultSet.getString("title");
				String deadline_date = resultSet.getString(4);
				System.out.println(deadline_id + " " + deadline_title + " " + deadline_date);
				deadlineData.add(new Deadline(
						deadline_id,
						c,
						deadline_title,
						deadline_date
				));
			}
			connection.close();
			statement.close();
			resultSet.close();
		} catch (SQLException e) {
			e.printStackTrace();

		}
		return deadlineData;
	}

	private ObservableList<Appointment> getDataFromAnAppointmentAndAddToObservableList(String query){
		ObservableList<Appointment> appointmentData = FXCollections.observableArrayList();
		try {
			connection = database.getConnection();
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);//"SELECT * FROM deadline;"
			System.out.println(query);
			ResultSetMetaData rsmd = resultSet.getMetaData();
			System.out.println(resultSet);
			int columnsNumber = rsmd.getColumnCount();
			while(resultSet.next()){
				for (int i = 1; i <= columnsNumber; i++) {
					if (i > 1) System.out.print(",  ");
					String columnValue = resultSet.getString(i);
					System.out.print(columnValue + " " + rsmd.getColumnName(i));
				}
				System.out.println();
				int appointment_id = resultSet.getInt(1);
				String appointment_title = resultSet.getString("title");
				String appointment_room = resultSet.getString("room");
				String appointment_address = resultSet.getString("address");
				String appointment_city = resultSet.getString("city");
				String appointment_state = resultSet.getString("state");
				String appointment_zip = resultSet.getString("zip");
				String appointment_date = resultSet.getString("date");

				System.out.println(appointment_id + " " + appointment_title + " " + appointment_room);
				appointmentData.add(new Appointment(
						appointment_id,
						c,
						appointment_title,
						appointment_room,
						appointment_address,
						appointment_city,
						appointment_state,
						appointment_zip,
						appointment_date
				));
			}
			connection.close();
			statement.close();
			resultSet.close();
		} catch (SQLException e) {
			e.printStackTrace();

		}
		return appointmentData;
	}

	public void refreshLists(){
		deadlineTable.getItems().clear();
		deadlineTitleColumn.setCellValueFactory(new PropertyValueFactory<Deadline,String>("title"));
		deadlineDateColumn.setCellValueFactory(new PropertyValueFactory<Deadline,LocalDateTime>("date"));
		deadlines = getDataFromADeadlineAndAddToObservableList("SELECT * FROM deadline WHERE case_id = " + c.getCase_id());
		deadlineTable.getItems().addAll(deadlines);

		appointmentTable.getItems().clear();
		appointmentTitleColumn.setCellValueFactory(new PropertyValueFactory<Appointment,String>("title"));
		appointmentLocationColumn.setCellValueFactory(new PropertyValueFactory<Appointment,String>("room"));
		appointmentDateColumn.setCellValueFactory(new PropertyValueFactory<Appointment,LocalDateTime>("date"));
		appointments = getDataFromAnAppointmentAndAddToObservableList("SELECT * FROM appointment WHERE case_id = " + c.getCase_id());
		appointmentTable.getItems().addAll(appointments);
	}

	public void setDetails(){
		refreshLists();
	}

}
